<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Cache;

abstract class BaseModel extends Model
{
    CONST CACHE = Cache::class;

    protected $guarded = ['id'];

    /**
     * @var array
     * Список eloquent событий и соответсвующих им методов в модели
     * если в модели имеется соответсвующий метод, он назначится слушателем на событие
     * Внимание! Данные методы всегда писать в начале класса, сразу после переопределяемых методов.
     */
    private static $events = [
        'creating'  => 'beforeCreate',
        'created'   => 'afterCreate',
        'updating'  => 'beforeUpdate',
        'updated'   => 'afterUpdate',
        'saving'    => 'beforeSave',
        'saved'     => 'afterSave'
    ];

    /**
     * Название поля хранящего идентификатор ответсвенного за запись.
     * @var string
     */
    protected $owner_id = '';

    protected static function boot() {
        parent::boot(); // TODO: Change the autogenerated stub
        $class = get_called_class();
        foreach (self::$events as $event=>$method){
            self::registerEvent($class, $method, $event);
        }
    }

    /**
     * Метод для регистрации слушателя на событие
     * @param string $class - модель на событие которой вешаем слушатель
     * @param string $method - метод в этой модели который должен выполниться по событию
     * @param string $event - eloquent событие которое необходимо прослушать
     */
    protected static function registerEvent(string $class, string $method, string $event) : void{
        if(method_exists($class, $method)){
            self::$event(function ($record) use ($method){
                self::$method($record);
            });
        }
    }

    /**
     * @return string
     */
    public function getOwnerField(){
        return $this->owner_id;
    }

}
